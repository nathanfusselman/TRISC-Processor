// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2020 14:22:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FSM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FSM_vlg_sample_tst(
	CLK,
	ID,
	RESET,
	sampler_tx
);
input  CLK;
input [10:0] ID;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or ID or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FSM_vlg_check_tst (
	C,
	nextstate,
	state,
	sampler_rx
);
input [15:0] C;
input [5:0] nextstate;
input [5:0] state;
input sampler_rx;

reg [15:0] C_expected;
reg [5:0] nextstate_expected;
reg [5:0] state_expected;

reg [15:0] C_prev;
reg [5:0] nextstate_prev;
reg [5:0] state_prev;

reg [15:0] C_expected_prev;
reg [5:0] nextstate_expected_prev;
reg [5:0] state_expected_prev;

reg [15:0] last_C_exp;
reg [5:0] last_nextstate_exp;
reg [5:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	nextstate_prev = nextstate;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	nextstate_expected_prev = nextstate_expected;
	state_expected_prev = state_expected;
end


// expected C[ 15 ]
initial
begin
	C_expected[15] = 1'bX;
end 
// expected C[ 14 ]
initial
begin
	C_expected[14] = 1'bX;
end 
// expected C[ 13 ]
initial
begin
	C_expected[13] = 1'bX;
end 
// expected C[ 12 ]
initial
begin
	C_expected[12] = 1'bX;
end 
// expected C[ 11 ]
initial
begin
	C_expected[11] = 1'bX;
end 
// expected C[ 10 ]
initial
begin
	C_expected[10] = 1'bX;
end 
// expected C[ 9 ]
initial
begin
	C_expected[9] = 1'bX;
end 
// expected C[ 8 ]
initial
begin
	C_expected[8] = 1'bX;
end 
// expected C[ 7 ]
initial
begin
	C_expected[7] = 1'bX;
end 
// expected C[ 6 ]
initial
begin
	C_expected[6] = 1'bX;
end 
// expected C[ 5 ]
initial
begin
	C_expected[5] = 1'bX;
end 
// expected C[ 4 ]
initial
begin
	C_expected[4] = 1'bX;
end 
// expected C[ 3 ]
initial
begin
	C_expected[3] = 1'bX;
end 
// expected C[ 2 ]
initial
begin
	C_expected[2] = 1'bX;
end 
// expected C[ 1 ]
initial
begin
	C_expected[1] = 1'bX;
end 
// expected C[ 0 ]
initial
begin
	C_expected[0] = 1'bX;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'bX;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'bX;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// expected nextstate[ 5 ]
initial
begin
	nextstate_expected[5] = 1'bX;
end 
// expected nextstate[ 4 ]
initial
begin
	nextstate_expected[4] = 1'bX;
end 
// expected nextstate[ 3 ]
initial
begin
	nextstate_expected[3] = 1'bX;
end 
// expected nextstate[ 2 ]
initial
begin
	nextstate_expected[2] = 1'bX;
end 
// expected nextstate[ 1 ]
initial
begin
	nextstate_expected[1] = 1'bX;
end 
// expected nextstate[ 0 ]
initial
begin
	nextstate_expected[0] = 1'bX;
end 
// generate trigger
always @(C_expected or C or nextstate_expected or nextstate or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected nextstate = %b | expected state = %b | ",C_expected_prev,nextstate_expected_prev,state_expected_prev);
	$display("| real C = %b | real nextstate = %b | real state = %b | ",C_prev,nextstate_prev,state_prev);
`endif
	if (
		( C_expected_prev[0] !== 1'bx ) && ( C_prev[0] !== C_expected_prev[0] )
		&& ((C_expected_prev[0] !== last_C_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[0] = C_expected_prev[0];
	end
	if (
		( C_expected_prev[1] !== 1'bx ) && ( C_prev[1] !== C_expected_prev[1] )
		&& ((C_expected_prev[1] !== last_C_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[1] = C_expected_prev[1];
	end
	if (
		( C_expected_prev[2] !== 1'bx ) && ( C_prev[2] !== C_expected_prev[2] )
		&& ((C_expected_prev[2] !== last_C_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[2] = C_expected_prev[2];
	end
	if (
		( C_expected_prev[3] !== 1'bx ) && ( C_prev[3] !== C_expected_prev[3] )
		&& ((C_expected_prev[3] !== last_C_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[3] = C_expected_prev[3];
	end
	if (
		( C_expected_prev[4] !== 1'bx ) && ( C_prev[4] !== C_expected_prev[4] )
		&& ((C_expected_prev[4] !== last_C_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[4] = C_expected_prev[4];
	end
	if (
		( C_expected_prev[5] !== 1'bx ) && ( C_prev[5] !== C_expected_prev[5] )
		&& ((C_expected_prev[5] !== last_C_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[5] = C_expected_prev[5];
	end
	if (
		( C_expected_prev[6] !== 1'bx ) && ( C_prev[6] !== C_expected_prev[6] )
		&& ((C_expected_prev[6] !== last_C_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[6] = C_expected_prev[6];
	end
	if (
		( C_expected_prev[7] !== 1'bx ) && ( C_prev[7] !== C_expected_prev[7] )
		&& ((C_expected_prev[7] !== last_C_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[7] = C_expected_prev[7];
	end
	if (
		( C_expected_prev[8] !== 1'bx ) && ( C_prev[8] !== C_expected_prev[8] )
		&& ((C_expected_prev[8] !== last_C_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[8] = C_expected_prev[8];
	end
	if (
		( C_expected_prev[9] !== 1'bx ) && ( C_prev[9] !== C_expected_prev[9] )
		&& ((C_expected_prev[9] !== last_C_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[9] = C_expected_prev[9];
	end
	if (
		( C_expected_prev[10] !== 1'bx ) && ( C_prev[10] !== C_expected_prev[10] )
		&& ((C_expected_prev[10] !== last_C_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[10] = C_expected_prev[10];
	end
	if (
		( C_expected_prev[11] !== 1'bx ) && ( C_prev[11] !== C_expected_prev[11] )
		&& ((C_expected_prev[11] !== last_C_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[11] = C_expected_prev[11];
	end
	if (
		( C_expected_prev[12] !== 1'bx ) && ( C_prev[12] !== C_expected_prev[12] )
		&& ((C_expected_prev[12] !== last_C_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[12] = C_expected_prev[12];
	end
	if (
		( C_expected_prev[13] !== 1'bx ) && ( C_prev[13] !== C_expected_prev[13] )
		&& ((C_expected_prev[13] !== last_C_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[13] = C_expected_prev[13];
	end
	if (
		( C_expected_prev[14] !== 1'bx ) && ( C_prev[14] !== C_expected_prev[14] )
		&& ((C_expected_prev[14] !== last_C_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[14] = C_expected_prev[14];
	end
	if (
		( C_expected_prev[15] !== 1'bx ) && ( C_prev[15] !== C_expected_prev[15] )
		&& ((C_expected_prev[15] !== last_C_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp[15] = C_expected_prev[15];
	end
	if (
		( nextstate_expected_prev[0] !== 1'bx ) && ( nextstate_prev[0] !== nextstate_expected_prev[0] )
		&& ((nextstate_expected_prev[0] !== last_nextstate_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nextstate[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nextstate_expected_prev);
		$display ("     Real value = %b", nextstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_nextstate_exp[0] = nextstate_expected_prev[0];
	end
	if (
		( nextstate_expected_prev[1] !== 1'bx ) && ( nextstate_prev[1] !== nextstate_expected_prev[1] )
		&& ((nextstate_expected_prev[1] !== last_nextstate_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nextstate[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nextstate_expected_prev);
		$display ("     Real value = %b", nextstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_nextstate_exp[1] = nextstate_expected_prev[1];
	end
	if (
		( nextstate_expected_prev[2] !== 1'bx ) && ( nextstate_prev[2] !== nextstate_expected_prev[2] )
		&& ((nextstate_expected_prev[2] !== last_nextstate_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nextstate[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nextstate_expected_prev);
		$display ("     Real value = %b", nextstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_nextstate_exp[2] = nextstate_expected_prev[2];
	end
	if (
		( nextstate_expected_prev[3] !== 1'bx ) && ( nextstate_prev[3] !== nextstate_expected_prev[3] )
		&& ((nextstate_expected_prev[3] !== last_nextstate_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nextstate[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nextstate_expected_prev);
		$display ("     Real value = %b", nextstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_nextstate_exp[3] = nextstate_expected_prev[3];
	end
	if (
		( nextstate_expected_prev[4] !== 1'bx ) && ( nextstate_prev[4] !== nextstate_expected_prev[4] )
		&& ((nextstate_expected_prev[4] !== last_nextstate_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nextstate[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nextstate_expected_prev);
		$display ("     Real value = %b", nextstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_nextstate_exp[4] = nextstate_expected_prev[4];
	end
	if (
		( nextstate_expected_prev[5] !== 1'bx ) && ( nextstate_prev[5] !== nextstate_expected_prev[5] )
		&& ((nextstate_expected_prev[5] !== last_nextstate_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nextstate[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nextstate_expected_prev);
		$display ("     Real value = %b", nextstate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_nextstate_exp[5] = nextstate_expected_prev[5];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FSM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [10:0] ID;
reg RESET;
// wires                                               
wire [15:0] C;
wire [5:0] nextstate;
wire [5:0] state;

wire sampler;                             

// assign statements (if any)                          
FSM i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.CLK(CLK),
	.ID(ID),
	.RESET(RESET),
	.nextstate(nextstate),
	.state(state)
);
// ID[ 10 ]
initial
begin
	ID[10] = 1'b0;
end 
// ID[ 9 ]
initial
begin
	ID[9] = 1'b0;
end 
// ID[ 8 ]
initial
begin
	ID[8] = 1'b0;
end 
// ID[ 7 ]
initial
begin
	ID[7] = 1'b0;
end 
// ID[ 6 ]
initial
begin
	ID[6] = 1'b0;
end 
// ID[ 5 ]
initial
begin
	ID[5] = 1'b0;
end 
// ID[ 4 ]
initial
begin
	ID[4] = 1'b0;
end 
// ID[ 3 ]
initial
begin
	ID[3] = 1'b0;
end 
// ID[ 2 ]
initial
begin
	ID[2] = 1'b0;
end 
// ID[ 1 ]
initial
begin
	ID[1] = 1'b0;
end 
// ID[ 0 ]
initial
begin
	ID[0] = 1'b1;
end 

// CLK
initial
begin
	CLK = 1'b1;
	CLK = #75000 1'b0;
	CLK = #25000 1'b1;
	# 25000;
	repeat(17)
	begin
		CLK = 1'b0;
		CLK = #25000 1'b1;
		# 25000;
	end
	CLK = 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #25000 1'b0;
	RESET = #25000 1'b1;
end 

FSM_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.ID(ID),
	.RESET(RESET),
	.sampler_tx(sampler)
);

FSM_vlg_check_tst tb_out(
	.C(C),
	.nextstate(nextstate),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

